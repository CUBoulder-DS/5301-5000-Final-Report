
# Data

Pursuant to the study, the team sought out multiple datasets on which we could evaluate the performance of two selected recognition models (Facebook's DeepFace and K. Karkkainen & J. Joo's Fair Face models) to generate performance data and perform statistical analysis on their ability to accurately identify race, age, and gender of a subject in a photograph.

Collectively, we landed on the UTK dataset to perform our evaluation:
[https://susanqq.github.io/UTKFace/](https://susanqq.github.io/UTKFace/)

The dataset has three main sets available for download from the main page: A set of "in-the-wild" faces, which are the raw unprocessed images. The second set is the Aligned & Cropped Faces, which have been cut down to allow facial algorithms to read them more easily. The final file is the Landmarks (68 points) dataset, which contains the major facial landmark points that algorithms use and process to examine the images.

## Exploration of Source Data

::: {#fig-faces layout-ncol=3}

![Age=6, Gender=F, Race=Indian](images/utk_imgs/6_1_3_20161220223052131.jpg){#fig-img1}

![Age=38, Gender=M, Race=White](images/utk_imgs/38_0_0_20170105172756958.jpg){#fig-img2}

![Age=80, Gender=M, Race=Asian](images/utk_imgs/80_0_2_20170111201008732.jpg){#fig-img3}

Example face images from the UTK dataset [@utkdataset] with their associated given labels.
:::

<!-- CK -->

::: {.content-visible when-format="html"}
::: {#fig-data-eda}
```{=html}
<iframe id="Shiny App" src="https://carlklein.shinyapps.io/5000-final/" style="border: none; width: 100%; height: 820px" frameborder="0"></iframe>
```

An interactive figure showcasing the distributions of various data factors in the image dataset, and showcasing the underlying data.
:::
:::

::: {.content-visible when-format="pdf"}
::: {#fig-data-eda-pdf layout-ncol=2}

![Image data EDA]("images/shiny1.png")

![Image dataset visualization]("images/shiny2.png")

Screenshots of the interactive figure showcasing the distributions of various data factors in the image dataset, and showcasing the underlying data. To see and interact with this figure, go to [the website link](https://cuboulder-ds.github.io/5301-5000-Final-Report/data.html)
:::
:::

::: callout-note
## From the report requirements

This section should describe the data you'll be using. Answer **at least** **all** of the following questions:

-   How was the data collected?

The dataset used in this research is a publicly non-commercial available dataset on Github called "UTKFace". The data was collected by the The University of Tennessee, Knoxville. It is specified on its Github page that the images were gathered from the internet. They are likely to be obtained through technique such as web scrapping. The dataset contains more than 20,000 images, representing a highly diversed demographic. However, face images are vary in pose, facial expression, lighting, and resolution.

-   What are the sources and influences of bias in the data?

The distribution of each demographic groups are not normally distributed. By plotting a distribution of each demographic group, it is evident that the dataset contains an uneven high volume of older White men. While a smaller porportion of female among ...(input race)... is present.

-   What are the important features (=columns) that you are using in your analysis? What do they mean?

There are three features in the dataset which are essential to our analysis. They are Race, Gender, and Age.

Race is categorized into five groups; Asian, Black, Indian, White, and Other. It should be noted by Asian group in this dataset mostly refers to people from East and Southeast Asia. Whereas, Other includes ethnicities such as Hispanic, Latino, and Middle Eastern.

Gender is divided into two groups, either male or female.

Lastly, Age is represented with an integer. This dataset contains people of all ages ranging from 0 to 116.

Feel free to add anything else that you think is necessary for understanding the paper and the context of the problem.

:::


```{r}
suppressPackageStartupMessages(library(tidyverse))
#this is relocated to Readme.md.  I will comment out the code, but retain it
#reasoning:  may need it in the future for other purposes
  # the table in readme.md was copied/pasted from the HTML output of this code.

#library(tidyverse)
f <- c(
"Croped_ff_np.csv",
"MasterDataFrame.csv",
"crop_df_np.csv",
"crop_df_p_mtcnn.csv",
"crop_df_p_opencv.csv",
"cropped_UTK.csv",
"cropped_UTK_dataset.csv",
"cropped_ff_p.csv",
"joined_permutations.csv",
"new_ff_c_np.csv",
"new_ff_c_p.csv",
"new_ff_uc_np.csv",
"new_ff_uc_p.csv",
"non_normalized_DeepFace_uncropped_DF_all.csv",
"non_normalized_FairFace_uncropped_FF_all.csv",
"uncropped_DF_all.csv",
"uncropped_FF_all.csv",
"uncropped_UTK.csv",
"uncropped_UTK_dataset.csv",
"uncropped_df_np.csv",
"uncropped_df_p_mtcnn.csv",
"uncropped_df_p_opencv.csv",
"uncropped_ff_np.csv",
"uncropped_ff_p.csv"
)
p <- c(
"Permutation evaluation (older version) for fairface, no preprocessing on cropped images.  Updated this file to look at the same files as the uncropped dataset.", #Croped_ff_np.csv",
"Final master data file containing all input and output files", #"MasterDataFrame.csv",
"Permutation evaluation for DeepFace, cropped images, no pre-processing", #"crop_df_np.csv",
"Permutation evaluation for DeepFace, cropped images, preprocessed with MTCNN backend.", #"crop_df_p_mtcnn.csv",
"Permutation evaluation for DeepFace, cropped images, preprocessed with OpenCV backend.",  #"crop_df_p_opencv.csv",
"Permutation evaluation (older version), list of cropped files to perform evaluation.", #"cropped_UTK.csv",
"Permutation evaluation (newest version), list of cropped files to perform evaluation.", #"cropped_UTK_dataset.csv",
"Permutation evaluation (older version), used older version of cropped images dataset.", #"cropped_ff_p.csv",
"Permutation evaluation (newest version), joined all permutation outputs from DeepFace and FairFace to a single file", #"joined_permutations.csv",
"Permutation evaluation (newest version), FairFaice outputs for cropped images with no preprocessing", #"new_ff_c_np.csv",
"Permutation evaluation (newest version), FairFaice outputs for cropped images with dlib preprocessing", #"new_ff_c_p.csv",
"Permutation evaluation (newest version), FairFaice outputs for uncropped images with no preprocessing", #"new_ff_uc_np.csv",
"Permutation evaluation (newest version), FairFaice outputs for uncropped images with dlib preprocessing.", #"new_ff_uc_p.csv",
"Final dataset of DeepFace Outputs (non-normalized)", #"non_normalized_DeepFace_uncropped_DF_all.csv",
"Final dataset of FairFace Outputs (non-normalized)", #"non_normalized_FairFace_uncropped_FF_all.csv",
"Final normalized output for DeepFace - used to build MasterDataFrame.csv", #"uncropped_DF_all.csv",
"Final normalized output for FairFace - used to build MasterDataFrame.csv", #"uncropped_FF_all.csv",
"Permutation evaluation (older version) - source data file for iteration script", #"uncropped_UTK.csv",
"Permutation evaluation (newest version) - source data file for uncropped images in iteration script", #"uncropped_UTK_dataset.csv",
"Permutation evaluation (newest version) - DeepFace uncropped images with no preprocessing", #"uncropped_df_np.csv",
"Permutation Evaluation (newest version) - DeepFace uncropped images with mtcnn preprocessing", #"uncropped_df_p_mtcnn.csv",
"Permutation Evaluation (newest version) - DeepFace uncropped images with opencv preprocessing", #"uncropped_df_p_opencv.csv",
"Permutation Evaluation (older version) - FairFace uncropped images with no preprocessing", #"uncropped_ff_np.csv",
"Permutation Evaluation (older version) - FairFace uncropped images with dlib preprocessing." #"uncropped_ff_p.csv"
)
r <- c(
"Remove from github data folder.", #"Permutation evaluation (older version) for fairface, no preprocessing on cropped images.  Updated this file to look at the same files as the uncropped dataset.", #Croped_ff_np.csv",
"Keep as-is with no changes", #"Final master data file containing all input and output files", #"MasterDataFrame.csv",
"Retain; rename to PERM_DF_c_np.csv", #"Permutation evaluation for DeepFace, cropped images, no pre-processing", #"crop_df_np.csv",
"Retain; rename to PERM_DF_c_p_mtcnn.csv", #"Permutation evaluation for DeepFace, cropped images, preprocessed with MTCNN backend.", #"crop_df_p_mtcnn.csv",
"Retain; rename to PERM_DF_c_p_opencv.csv", #"Permutation evaluation (newest version)for DeepFace, cropped images, preprocessed with OpenCV backend.",  #"crop_df_p_opencv.csv",
"Remove from github data folder", #"Permutation evaluation (older version), list of cropped files to perform evaluation.", #"cropped_UTK.csv",
"Retain with no changes", #"Permutation evaluation (newest version), list of cropped files to perform evaluation.", #"cropped_UTK_dataset.csv",
"Remove from github data folder.", #"Permutation evaluation (older version), used older version of cropped images dataset.", #"cropped_ff_p.csv",
"Retain with no changes", #"Permutation evaluation (newest version), joined all permutation outputs from DeepFace and FairFace to a single file", #"joined_permutations.csv",
"Retain; rename to PERM_FF_c_np.csv", #"Permutation evaluation (newest version), FairFaice outputs for cropped images with no preprocessing", #"new_ff_c_np.csv",
"Retain; rename to PERM_FF_c_p.csv", #"Permutation evaluation (newest version), FairFaice outputs for cropped images with dlib preprocessing", #"new_ff_c_p.csv",
"Retain; rename to PERM_FF_uc_np.csv", #"Permutation evaluation (newest version), FairFaice outputs for uncropped images with no preprocessing", #"new_ff_uc_np.csv",
"Retain; rename to PERM_FF_uc_p.csv", #"Permutation evaluation (newest version), FairFaice outputs for uncropped images with dlib preprocessing.", #"new_ff_uc_p.csv",
"Retain; rename to Master_DF_non_normalized.csv", #"Final dataset of DeepFace Outputs (non-normalized)", #"non_normalized_DeepFace_uncropped_DF_all.csv",
"Retain; rename to Master_FF_non_normalized.csv", #"Final dataset of FairFace Outputs (non-normalized)", #"non_normalized_FairFace_uncropped_FF_all.csv",
"Retain with no changes", #"Final normalized output for DeepFace - used to build MasterDataFrame.csv", #"uncropped_DF_all.csv",
"Retain with no changes", #"Final normalized output for FairFace - used to build MasterDataFrame.csv", #"uncropped_FF_all.csv",
"Remove from github data folder.", #"Permutation evaluation (older version) - source data file for iteration script", #"uncropped_UTK.csv",
"Retain with no changes", #"Permutation evaluation (newest version) - source data file for uncropped images in iteration script", #"uncropped_UTK_dataset.csv",
"Retain; rename to PERM_DF_uc_np.csv", #"Permutation evaluation (newest version) - DeepFace uncropped images with no preprocessing", #"uncropped_df_np.csv",
"Retain; rename to PERM_DF_uc_p_mtcnn.csv", #"Permutation Evaluation (newest version) - DeepFace uncropped images with mtcnn preprocessing", #"uncropped_df_p_mtcnn.csv",
"Retain; rename to PERM_DF_uc_p_opencv.csv", #"Permutation Evaluation (newest version) - DeepFace uncropped images with opencv preprocessing", #"uncropped_df_p_opencv.csv",
"Remove from github data folder.", #"Permutation Evaluation (older version) - FairFace uncropped images with no preprocessing", #"uncropped_ff_np.csv",
"Remove from github data folder." #"Permutation Evaluation (older version) - FairFace uncropped images with dlib preprocessing.", #"uncropped_ff_p.csv"
)

t <- tibble(filenames=f,purpose=p,recommendations=r)
#knitr::kable(t)
```

## Data Selection (UTK Dataset) - LN DV

### Motivation for the Selection of UTKFace Dataset

In 2018, [Joy Buolamwini](https://www.media.mit.edu/people/joyab/overview/) [paper link](https://www.media.mit.edu/publications/gender-shades-intersectional-accuracy-disparities-in-commercial-gender-classification/), a PhD candidate at MIT Media Lab, published a thesis on gender and racial biases in facial recognition in algorithms. In her paper, she tested facial recongition softwares from multiple large technology companies such as Microsoft, IBM, and Amazom on its effectiveness for different demographic groups. Her research led to a surprising conclusion that most AI algorithms offer a substantially less accurate prediction for feminine/female faces, particularly those with dark skin color.

To determine the degree in which bias is still present in modern facial recognition models, a dataset which comprise of face images with high diversity in regards to ethinicty is required. Upon searching, UTKFace came out as the largest dataset which fit the preferred qualifications.

### Data Collection Method

The dataset utilized for this research is UTKFace dataset. It is a publicly available large scale face dataset non-commercial on Github. The dataset was created by Yang Song and Zhifei Zhang, researchers at Adobe and PhD candidates at The University of Tennessee, Knoxville. On its Github page, it is specified that the images were collected from the internet. They appear to be obtained through the application of technique such as web scrapping. The dataset contains more than 20,000 face images, representing a highly diversed demographic. However, face images are vary in pose, facial expression, lighting, and resolution.

### Sources and Influences of Bias in the Dataset

* Facial datasets can be extremely hard to categorize correctly, never mind reducing bias overall. Facial features that are androgynous or defer from the average features of the set can often be misrepresented or reported incorrectly. Those with features that make them look younger or older than their actual age may also be difficult for a computer to accurately guess.

* The datasets used for analysis contain solely male/masculine and female/feminine faces. As stated above, the faces are labelled either 0, for male, or 1, for female. There are no gender non-conforming/non-binary/trans faces or people reported in the datasets, which could introduce potential bias. This absence of an entire category of facial features could also result in inaccurate guesses should these faces be added to the data later.

* The datasets do not report nationality or ethnicity. This can introduce inaccuracy in the part of the identification, and it also may identify the face in a racial group that the person identified would consider inaccurate. This is as much a matter of potentially inaccurate data as it is social labels. There is also a level of erasure associated with simply creating a "multi-racial" category, given that it would bin all multiracial faces together with no further consideration. That is to say, there is no ideal solution to the issue at this time. However, it is always worth pointing out potential biases in data, research, and analysis.

* The data given in the UTK dataset is composed purely of people who have their faces on the internet. This introduces a potential sampling bias. Given the topic, it is also likely to come from populations well-versed in technology. This can often exclude rural populations. Thus, the facial data present can be skewed towards urban residents or other characteristics, which can potentially create "lurking variables" that we aren't aware of within the data. This is a common problem that many Anthropological and Sociological studies face when collecting and analyzing data. Being aware of the possibility is often the first, and most crucial, step towards reducing it.

Overall, all of the given potential biases listed above are simply the largest and most easily identified. It is possible that other sources of bias are present in the data that we haven't noticed. And identifying these biases does not mean that the data is not sound, or that any conclusions drawn from it are invalid. It simply indicates that further research should be done and that this data is far from the most complete picture of human facial features and identification.

## Selected Models (LN DV)

### FairFace 

Developed by researchers at University of California, Los Angeles, FairFace was specifically designed to mitigate gender and racial biases. The [model](https://github.com/dchen236/FairFace) was trained on 100K+ face images of people of various ethnicities with approximately equal stratification across all groups. Beside facial recognition model, FairFace also provided the [dataset](https://github.com/joojs/fairface) which it was trained on. The dataset is immensely popular among facial recognition algorithm developers. Owing to its reputation in bias mitigation, FairFace appears to be a valuable piece for the objective of this research.

### DeepFace

DeepFace is a lightweight open-source model developed and used by Meta (Facebook). Since the model is used by one of the largest social media company, it is widely known among developers. Therefore, its popularity prompts us to evaluate its performance. It should be noted that this model of DeepFace is a [free open source version](https://github.com/serengil/deepface). It is highly likely that this version is less advanced than what Meta is actually utilizing. Thus, we should not view the result of this model as a representative of Meta's algorithm.

## Dataset Features 

Understanding and selecting the appropriate features for our data is key to success in analysis.  Furthermore, understanding feature differences and planning standardization across datasets is key in making sound comparisons and analyses upon the dataset.  

### Input data set

The input dataset, being UTKFace, provided feature information natively in each filename without additional external data.  The features contained therein include the following items for each image's subject.  They are defined as follows in the UTKFace Readme:

* "[race] is an integer from 0 to 4, denoting White, Black, Asian, Indian, and Others (like Hispanic, Latino, Middle Eastern)."

* "[gender] is either 0 (male) or 1 (female)"

* "[age] is an integer from 0 to 116, indicating the age"

We processed each image to extract these features from each image and create a table of source information (link to source data file here).

As our work is focused in potential biases in protected classes such as race, gender, and age, the features of UTKFace are sufficient to meet the needs for an input dataset for category prediction in our selected models.

### FairFace Outputs

FairFace outputs provided predictions age and race, and two different predictions for race - one based upon their "Fair4" model, and the other based upon their "Fair7" model.  In addition to these predictions, the output included scores for each category.  With the nature of our planned analyses, the scores are of less import to us in our evaluation.

To examine more in detail on "Fair" and "Fair4" models, the latter provided predictions of race in the following categories:  [White, Black, Asian, Indian].  Of key note, the "Fair4" model omitted "Other" categories as listed in the race category for the UTK dataset.  However, the "Fair7" model provides predictions across [White, Black, Latino_Hispanic, East Asian, Southeast Asian, Indian, Middle Eastern].  We elected to use the the Fair7 model, and to refactor the output categories to match those of the UTK dataset. Namely, we refactored instances of Middle Eastern and Latino_Hispanic as "Other" and instances of "East Asian" and "Southeast Asian" as "Asian" to match the categories explicitly listed in UTKFace.

Additionally, FairFace only provides a predicted age range as opposed to a specific, single, predicted age as a string.  To enable comparison of actual values to the predicted values, we maintained this column as a categorical variable, and split it into a lower and upper bound of predicted age as an integer in the event we require it for our analyses.

With the above considerations in mind, the following output features are of import to the team:

```{r}
columns<-c("name_face_align","race_preds_fair","gender_preds_fair7","age_preds_fair")
defs<-c("The name and path of the file upon which FairFace made predictions","The predicted race of the image subject","The predicted gender of the image subject","The predicted age range of the image subject")
types<-c("String","String","String","String")
valid<-c("[filepath]","[White|Black|Latino_Hispanic|East Asian|Southeast Asian|Middle Eastern|Indian]","[Male|Female]","['0-2'|'3-9'|'10-19'|'20-29'|'30-39'|'40-49'|'50-59'|'60-69'|'70+']")

FF_features <- tibble("Column Name"=columns,"Data Type"=types,"Significance"=defs,"Valid Values"=valid)
FF_features%>% knitr::kable()
```

### DeepFace Outputs

Default outputs have a wide-range of information for the user.  In addition to providing its predictions, DeepFace also provides scores associated with each evaluation on a per class basis (i.e. 92% for Race #1, 3% Race #2, 1% Race #3, and 4% Race #4).  For the purpose of our planned analyses, the score features are of less concern to us.

We hone in on the following select features from DeepFace outputs to have the ability to cross-compare between UTKFace, FairFace, and DeepFace:

```{r}
columns <- c("Age","Dominant Gender","Dominant Race")
types <- c("Integer","String","String")
defs <- c("The predicted age of the image subject","The predicted gender of the iamge subject","The predicted race of the image subject")

valid<-c("Any Integer","[Man|Woman]","[middle eastern|asian|white|latino hispanic|black|indian]")

DF_features <- tibble("Column Name"=columns,"Data Type"=types,"Significance"=defs,"Valid Values"=valid)
DF_features%>% knitr::kable()
```


### Standardizing model outputs

As can be seen above, there are some key differences between the outputs of both models as well as the source data that we needed to resolve to enable comparison of each dataset to one another.  We'll focus on the primary features of age, gender, and race from each dataset.

#### FairFace Output Modifications

We'll discuss FairFace first, as it introduces a requirement for modification to both our input information as well as the outputs for DeepFace.  

**Age** - FairFace only provides a categorical predicted age range as opposed to a specific numeric age.  We retain this age format and modify the last category of "70+" to "70-130" to ensure we can capture the gamut of all input and output ages in all datasets.  

**Gender** - No changes to predicted values; use "Male" and "Female"

**Race** - the source data from UTKFace has 5 categories "White" "Black" "Asian" "Indian" and "Other".  Using the defintions from UTKFace, we collapse the output categories of FairFace's Fair7 model as follows:

\["Southeast Asian","East Asian"\] => "Asian"
\["Middle Eastern" , "Latino_Hispanic\] => "Other"

### DeepFace Output Modifications

**Age**
Cut the predicted age into bins based upon the same prediction ranges provided by FairFace.  If the DeepFace predicted age falls into a range provided by FairFace, provide that as the predicted age range for DeepFace.

**Gender:** we adjust the DeepFace gender prediction outputs to match that of the source and FairFace data with the following refactoring: 
"Man" => "Male"
"Woman" => "Female"

**Race:** we adjust the DeepFace race prediction outputs to match that of the source dataset with the following refactoring: 

* "white" => "White"
* "black" => "Black"
* "indian" => "Indian"
* "asian" => "Asian"
* \["middle eastern", "latino hispanic"\] => "Other"

### Source Data Modifications

**Age:** We cut the predicted age into bins based upon the same prediction ranges provided by FairFace.  If the input / source data age falls into a range provided by FairFace, provide that is the source age range for the image subject.

**Gender:** No changes.

**Race:** No changes.

## Evaluating Permutations of Inputs and Models for Equitable Evaluation

Aside from the differences in the outputs of each model in terms of age, race, and gender, there are also substantial differences between FairFace and DeepFace in terms of their available settings when attempting to categorize and predict the features associated with an image.

The need for this permutation evaluation rose from some initial scripting and testing of these models on a small sample of images from another facial dataset - the Asian Face Age Dataset (**need citation here**).  We immediately grew concerned with DeepFace's performance using default settings (namely, enforcing requirement to detect a face prior to categorization/prediction, and using OpenCV as the default detection backend).  Running these initial scripting tests, we encountered a face detection failure rate, and thus a prediction failure rate, in DeepFace of approximately 70%.

We performed further exploratory analysis on both models in light of these facts, and sought some specific permutations of settings to determine what settings may provide the most fair and equitable comparison of the models prior to proceeding to further analysis.

The ultimate goal for us in performing this exploration was to identify the settings for each model that might best increase the likelihood that the model's output would result in a failure to reject our null hypotheses.  In lamens terms, our tests sought out the combination of settings that give each model the benefit of the doubt, and for each to deliver the greatest accuracy in their predictions.  For simplicity's sake, we leaned solely on the proportion of true positives across each category when compared with the source information to decide which settings to use.

### DeepFace Analysis Options

DeepFace has a robust degree of avaialble settings when performing facial categorization and recognition.  These include enforcing facial detection prior to classification of an image, as well as 8 different facial detection models to detect a face prior to categorization.  The default of these settings is OpenCV detection with detection enabled.  Other detection backends include ssd, dlib, mtcnn, retinaface, mediapipe, yolov8, yunet, and fastmtcnn.  
    
In a Python 3.8 environment, attempting to run detections using dlib, fastmtcnn, retinaface, mediapipe, yolov8, and yunet failed to run, or failed to install the appropriate models directly from source during exeuction.  Repairing any challenges or issues with the core functionality of DeepFace and FairFace's code is outside the scope of our work, and as such, we have excluded any of these non-functioning models from our settings permutation evaluation.

### FairFace Analysis Options

The default script from FairFace provided no options via its command line script to change runtime settings.  It uses dlib/resnet34 models for facial detection and image pre-processing, and uses its own Fair4 and Fair7 models for categorization.  There are no other options or flags that can be set by a user when processing a batch of images. 
    
We converted the simple script to a class in Python without addressing any feature bugs or errors in the underlying code.  This change provided us some additional options when performing the analysis of an input image using FairFace - namely, the ability to analyze and categorize an image with or without facial detection, similar to the functionality of DeepFace.  FairFace remains limited in the fact that is only detection model backend is built in dlib, but this change from a script to a class object gave us more options when considering what type of images to use and what settings to use on both models before generating our final dataset for analysis.

### Specific Permutations

With the above options in mind, we designed the following permutations for evaluation on a subset of the UTK dataset:

```{r}
suppressPackageStartupMessages(library(tidyverse))
names <- c("Detection","Detection Model","Image Source")
det <- c("Enabled","Enabled","Enabled","Enabled","Disabled","Disabled")
det_mod <- c(
  "FairFace=Dlib; DeepFace=OpenCV",
  "FairFace=Dlib; DeepFace=OpenCV",
  "FairFace=Dlib; DeepFace=mtcnn",
  "FairFace=Dlib; DeepFace=mtcnn",
  "FairFace,DeepFace=None",
  "FairFace,DeepFace=None"
)
img_src <- c(
  "Pre-cropped",
  "In-The-Wild",
  "Pre-cropped",
  "In-The-Wild",
  "Pre-cropped",
  "In-The-Wild"
)

# output_file_names <- c(
#   "new_ff_c_p.csv, crop_df_p_opencv.csv",
#   "new_ff_uc_p.csv, uncropped_df_p_opencv.csv",
#   "new_ff_c_p.csv, crop_df_p_mtcnn.csv",
#   "new_ff_uc_p.csv, uncropped_df_p_mtcnn.csv",
#   "new_ff_c_np.csv, cropped_df_np.csv",
#   "new_ff_uc_np.csv, uncropped_df_np.csv")
# tib <- tibble("Detection"=det,"Detection Model"=det_mod,"Image Source"=img_src, "Results Output"=output_file_names)
tib <- tibble("Detection"=det,"Detection Model"=det_mod,"Image Source"=img_src)
knitr::kable(tib)

```        

We processed each of the above setting permutations against approximately 9800 images, consisting of images from part 1 of 3 from the UTK datset.  Each of the cropped images (cropped_UTK_dataset.csv) and uncropped images (uncropped_UTK_dataset.csv) came from the same underlying subject in each image; the only difference between each image was whether or not it was pre-processed before evaluation by each model.  Having the same underlying source subject enables us to perform a direct comparison of results between cropped vs. in-the-wild images, and better support a conlcusion of which settings to use.

```{r}
# Load required libraries
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(kableExtra))

# Read the CSV file
permu_data <- read.csv("../data/joined_permutations.csv")

# Create match columns
permu_data$match_age_grp <- permu_data$src_age_grp == permu_data$pred_age_grp
permu_data$match_gender <- permu_data$src_gender == permu_data$pred_gender
permu_data$match_race <- permu_data$src_race == permu_data$pred_race
permu_data$match_all <- permu_data$match_race & permu_data$match_age_grp & permu_data$match_gender

# Suppress all messages
suppressMessages({
  # Create permu_pivot
  permu_pivot <- permu_data %>%
    group_by(pred_model) %>%
    summarise(match_all = sum(match_all),
              match_age_grp = sum(match_age_grp),
              match_gender = sum(match_gender),
              match_race = sum(match_race))

  # Create setting_pivot
  setting_pivot <- permu_data %>%
    group_by(pred_model, detection_enabled, detection_model, image_type) %>%
    summarise(match_all = sum(match_all),
              match_age_grp = sum(match_age_grp),
              match_gender = sum(match_gender),
              match_race = sum(match_race))

  # Create setting_count
  setting_count <- permu_data %>%
    group_by(pred_model, detection_enabled, detection_model, image_type) %>%
    summarise(setting_count = n())

  # Merge setting_pivot and setting_count
  setting_merge <- merge(setting_pivot, setting_count, by = c("pred_model", "detection_enabled", "detection_model", "image_type"))

  # Calculate rates
  setting_merge$all_rate <- setting_merge$match_all / setting_merge$setting_count
  setting_merge$age_grp_rate <- setting_merge$match_age_grp / setting_merge$setting_count
  setting_merge$gender_rate <- setting_merge$match_gender / setting_merge$setting_count
  setting_merge$race_rate <- setting_merge$match_race / setting_merge$setting_count

  # Drop unnecessary columns
  setting_merge <- select(setting_merge, -c(match_all, match_age_grp, match_gender, match_race, setting_count))
  
  # Print the table with kableExtra
  kable(setting_merge) %>%
    kable_styling()
})


```

Examining the true positive ratios for each case, our team came to the conclusion that the settings that gave both models the best chance for success in correctly predicting the age, gender, and race of subject images are as follows:

- FairFace: enforce facial detection with dlib, and use uncropped images for evaluation

- DeepFace: enforce facial detection with MTCNN detection backend, and use uncropped images for evaluation. 

These settings are equitable and make a degree of sense.  Using facial detection, specifically-coded for each model, should give each model the ability to isolate the portions of a face necessary for them to make a prediction, as opposed to using a pre-cropped image that could include unneeded information, or excluded needed information.

Having decided on these settings, our team proceeded to run the entirety of the UTK dataset through both DeepFace and FairFace models using a custom coded script [MasterScript.py](https://github.com/CUBoulder-DS/5301-5000-Final-Report/blob/main/src/sample%20code/MasterScript.py) that allowed us to apply multiprocessing across the list of images and evaluate all items in a reasonable amount of time. (cite FairFace here, may also need to reference that we rebuilt their script into a class format).

Due to the resource-intensive design of FairFace, our script enables multiprocessing of FairFace to allow for multiple simultaneous instances of the FairFace class as a pool of worker threads to iterate over all of the source data.

We attempted the same multiprocessing methodology for DeepFace, but encountered issues with silent errors and halting program execution when iterating over all images using DeepFace.  To alleviate this challenge, we processed DeepFace in a single-threaded manner, and with smaller portions of the dataset vs. pursuing an all-in-one go execution.  We proceeded to store the data for each of these smaller runs in multiple output files to combine once we completed all processing requirements.

## Result Output Format

The following table outlines, after the input and output data modifications, the final format of our data for use in our analyses.  This file is stored in the /data folder as [MasterDataFrame.csv](https://raw.githubusercontent.com/CUBoulder-DS/5301-5000-Final-Report/main/data/MasterDataFrame.csv)

```{r}
column_names <- c(
"img_path",
"file",
"src_age",
"src_gender",
"src_race",
"src_timestamp",
"src_age_grp",
"pred_model",
"pred_race",
"pred_gender",
"pred_age_DF_only",
"pred_age_grp",
"pred_age_lower",
"pred_age_upper"
)

definitions <- c(
"Relative path location of the file within the UTK dataset",
"The filename of each file within the UTK dataset",
"The age of the subject in each image from the UTK dataset",
"The gender of the subject in each image from the UTK dataset",
"The race of the subject in each image from the UTK datset",
"The time at which the image was submitted to the UTK dataset",
"The age group (matching the predicted age ranges from the FairFace outputs) for each image in the UTK dataset",
"The model used to produce the predicted output (FairFace or DeepFace)",
"The race of the subject in the image, predicted by the given prediction model under the pred_model column",
"The gender of the subject in the image, predicted by the given prediction model under the pred_model column",
"The integer-predicted age by DeepFace of the subject in the image",
"The age group of the subject in the image, predicted by the given prediction model under the pred_model column",
"The integer lower bound of the predicted age group",
"The integer upper bound of the predicted age group"
)

data_types <- c(
"character vector",
"character vector",
"integer",
"character vector",
"character vector",
"character vector",
"character vector",
"character vector",
"character vector",
"character vector",
"integer",
"character vector",
"integer",
"integer"
)

column_defs <- tibble("Column Name"=column_names,"Definition"=definitions, "Data Type"=data_types)

knitr::kable(column_defs)
```