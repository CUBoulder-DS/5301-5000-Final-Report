{
  "hash": "beacb6358206159579af094c710b40ce",
  "result": {
    "markdown": "---\ntitle: \"Data Exploration\"\nformat:\n  html:\n    resources: \n      - shinylive-sw.js\nfilters:\n  - shinylive\n---\n\n\nWe describe the data here. Note that the default global setting for Quarto is set to NOT output the code into the rendered document, aka only including the results of any R code.\n\n**We should include a print of the head of the dataframe of our data, along with some sample images!!**\n\n<!-- {{< include _CK_data_EDA_shiny.qmd >}} -->\n\n<!-- :::{.column-screen-inset} -->\n<!-- ```{shinylive-r} -->\n\n<!-- ## file: _CK_data_EDA_shiny.qmd -->\n<!-- ``` -->\n<!-- ::: -->\n\n\n<!-- CK -->\n\n\n::: {.cell}\n\n:::\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(shinythemes)\nlibrary(DT)\n\n# data\n# location of data\nutk_1 <- \"https://raw.githubusercontent.com/CUBoulder-DS/5301-5000-Final-Report/main/data/UTK/UTKpart1.csv\"\nutk_2 <- \"https://raw.githubusercontent.com/CUBoulder-DS/5301-5000-Final-Report/main/data/UTK/UTKpart2.csv\"\nutk_3 <- \"https://raw.githubusercontent.com/CUBoulder-DS/5301-5000-Final-Report/main/data/UTK/UTKpart3.csv\"\n# download data\ndf_1 <- read_csv(utk_1, col_select = c(src_age, src_race, src_gender))\ndf_2 <- read_csv(utk_2, col_select = c(src_age, src_race, src_gender))\ndf_3 <- read_csv(utk_3, col_select = c(src_age, src_race, src_gender))\n# combine data\ndf <- rbind(df_1, df_2, df_3)\n# clean data\nmydata <- df %>%\n  filter(src_age != '0' & src_race != '0' & src_gender != '0') %>%\n  rename(Age = src_age, Race = src_race, Gender = src_gender)\n\n# attach allows use of column names without calling full table\nattach(mydata)\n\n# server\nserver <- function(input, output, session) {\n  # underlying data datatable\n  output$originalData <- DT::renderDataTable(DT::datatable(mydata))\n  \n  output$underlyingDownload = downloadHandler(\n    filename = \"underlying.csv\",\n    content = function(file) {\n      write.csv(mydata.new(), file)\n    }\n  )\n  \n  # checkbox selection for race\n  output$raceSelect <- renderPrint({ input$checkGroupRace })\n  \n  # checkbox selection for gender\n  output$genderSelect <- renderPrint({ input$checkGroupGender })\n  \n  # selectbox for race, gender or none\n  output$subDensity <- renderPrint({ input$subDensitySelect })\n  \n  # slider for age\n  output$ageRange <- renderPrint({ input$sliderAge })\n  \n  # slider for alpha\n  output$alphaRange <- renderPrint({ input$sliderAlpha })\n  \n  # plot\n  output$densityPlot = renderPlot({\n    # age filter\n    gdata <- mydata %>%\n      filter(Age >= input$sliderAge[1] & Age <= input$sliderAge[2])\n    \n    # gender filter\n    if (length(input$checkGroupGender) == 0) {\n      gdata <- gdata\n    } else if (length(input$checkGroupGender) == 1 & input$checkGroupGender[1] == 'Female') {\n      gdata <- gdata %>%\n        filter(Gender == 'Female')\n    } else if (length(input$checkGroupGender) == 1 & input$checkGroupGender[1] == 'Male') {\n      gdata <- gdata %>%\n        filter(Gender == 'Male')\n    }\n    \n    # race filter\n    races <- c('Asian', 'Black', 'Indian', 'Other', 'White')\n    if (length(input$checkGroupRace) == 0 | length(input$checkGroupRace) == 5) {\n      gdata <- gdata\n    } else {\n      gdata <- gdata %>%\n        filter(Race %in% races[which(races %in% input$checkGroupRace)])\n    }\n    \n    # filter for just age, or add gender or race curves\n    if (input$subDensitySelect == 'None') {\n      ggplot(gdata) +\n        geom_density(aes(Age))\n    } else if (input$subDensitySelect == 'Gender') {\n      ggplot(gdata) +\n        geom_density(aes(Age, fill = Gender), alpha = input$sliderAlpha)\n    } else {\n      ggplot(gdata) +\n        geom_density(aes(Age, fill = Race), alpha = input$sliderAlpha)\n    }\n  })\n}\n\n# UI\nui <- fluidPage(\n  # row 1\n  fluidRow(\n    # Race selection\n    column(4,\n      checkboxGroupInput(\"checkGroupRace\",\n                         label = h3(\"Race Selection\"),\n                         choices = list(\"Asian\" = 'Asian',\n                                        \"Black\" = 'Black',\n                                        \"Indian\" = 'Indian',\n                                        \"Other\" = 'Other',\n                                        \"White\" = 'White'),\n                         selected = c('Asian', 'Black', 'Indian', 'Other', 'White'))\n    ),\n    # Gender selection\n    column(4,\n      checkboxGroupInput(\"checkGroupGender\",\n                         label = h3(\"Gender Selection\"),\n                         choices = list(\"Female\" = 'Female',\n                                        \"Male\" = 'Male'),\n                         selected = c('Male', 'Female'))\n    ),\n    # subDensity selection\n    column(4,\n      selectInput(\"subDensitySelect\",\n                  label = h3(\"Sub Filter\"),\n                  choices = list(\"Race\" = 'Race',\n                                 \"Gender\" = 'Gender',\n                                 \"None\" = 'None'),\n                  selected = 'None'))\n  ),\n  \n  # row 2\n  fluidRow(\n    # Age selection\n    column(6,\n      sliderInput(\"sliderAge\",\n                  label = h3(\"Age Range\"),\n                  min = 1,\n                  max = 135,\n                  value = c(15, 90))\n    ),\n    # Alpha selection\n      column(6,\n             sliderInput(\"sliderAlpha\",\n                         label = h3(\"Alpha Range\"),\n                         min = 0,\n                         max = 1,\n                         value = 0.2)\n    )\n  ),\n  \n  # plot\n  plotOutput(\"densityPlot\")\n\n)\n\nshinyApp(ui = ui, server = server)\n```\n\n\n\n::: callout-note\n## From the report requirements\n\nThis section should describe the data you'll be using. Answer **at least** **all** of the following questions:\n\n-   How was the data collected?\n\n-   What are the sources and influences of bias in the data?\n\n-   What are the important features (=columns) that you are using in your analysis? What do they mean?\n\nFeel free to add anything else that you think is necessary for understanding the paper and the context of the problem.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}