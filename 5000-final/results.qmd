# Results

```{r setup, include=FALSE}
#| include: false

library(tidyverse)
```

<!-- BJ !-->

```{r load_data, include=FALSE}
# master dataframe url
output_name <- 'https://raw.githubusercontent.com/CUBoulder-DS/5301-5000-Final-Report/main/data/MasterDataFrame.csv'

# entire master dataframe
output_df <- read_csv(output_name, show_col_types = FALSE) %>% 
  select(-c(img_path, file)) %>%
  mutate_if(is.character, as.factor) 

# Get chr columns as factors, re-ordered as they should
output_df$src_age_grp = factor(output_df$src_age_grp, 
                               levels = c("0-2", "3-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-130"))
output_df$pred_age_grp = factor(output_df$pred_age_grp, 
                               levels = c("0-2", "3-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-130"))
output_df$src_race = factor(output_df$src_race, levels=c("White", "Black", "Asian", "Indian", "Other"))
output_df$pred_race = factor(output_df$pred_race, levels=c("White", "Black", "Asian", "Indian", "Other"))

# Add correctness columns
output_df = output_df %>% 
  mutate(correct_gender = (src_gender == pred_gender), 
         correct_age = (src_age_grp == pred_age_grp), 
         correct_race = (src_race == pred_race))
  

# fairface dataframe
# exclude the indexing column and deepface only column
fairface_df <- output_df %>%
  filter(pred_model == 'FairFace') %>%
  select(-c(...1, pred_age_DF_only)) %>%
  drop_na()

# deepface dataframe
# exclude the indexing column
deepface_df <- output_df %>%
  filter(pred_model == 'DeepFace') %>%
  select(-...1) %>%
  drop_na()

# source dataframe
# use one of the models (since the data is doubled)
# include only the source ("src") columns
source_df <- output_df %>%
  filter(pred_model == 'FairFace') %>%
  select(c(src_age, src_age_grp, src_gender, src_race, src_timestamp)) %>%
  drop_na()
```

<!-- BJ !-->

::: panel-tabset
## Tabbed example output

```{r  ex2}
#| label: fig-sec4-ex2
#| fig-cap: ANother example caption
#| fig-subcap: 
#|   - Subcap
#|   - Subcap 2
#| layout-ncol: 2

f <- 1:10
## Tabbed example output
ggplot() + 
  geom_line(aes(x=f, y=f^2))

ggplot() + 
  geom_line(aes(x=f, y=1/f))
```

## Example outout

```{r ex1}
#| label: fig-sec4-ex1
#| fig-cap: A caption for generated figure
# Example code that's running
f <- 1:10
f

```
:::

::: callout-note
## From the report requirements

Describe the results of your analysis using visualizations, descriptive statistics, tables and similar.

Don't focus too much on the implications in this section -- that's what the next section is for. Just present the numbers/graphs.
:::

<!-- BJ !-->

## Output from DeepFace and FairFace

The two models, DeepFace and FairFace, were run on the dataset described previously. In @fig-output-hists, one can see the results of the predictions done by each model, by each factor that was considered: age, gender, and race. Note that the histogram distributions match the correct (source dataset) distributions, so we can see exactly the difference between what was provided and what was predicted, along with how well each model did on each category within each factor.

```{r plot_hists}
#| label: fig-output-hists
#| fig-cap: Histograms of the output from DeepFace and FairFace, with correct vs incorrect values colored. Note that the distributions match the correct (source dataset) distributions.
#| fig-subcap: 
#|   - Gender predictions
#|   - Age predictions
#|   - Race predictions
#| layout-ncol: 2
#| layout-nrow: 2

plot_category = function(src, correct, label) {
  num_cats = length(levels(output_df[[src]]))
  
  plot = ggplot() +
    geom_bar(mapping=aes(x=as.numeric(interaction(output_df[["pred_model"]], output_df[[src]])),
                         fill=interaction(output_df[["pred_model"]], output_df[[correct]]))) +
    scale_x_continuous(label, breaks=seq(1.5, 2*num_cats, 2), labels=levels(output_df[[src]]), limits=c(0,2*num_cats + 1)) +
    scale_fill_manual("Model and Correctness",
                      values = c("orangered", "firebrick", "springgreen", "green4"),
                      labels = c("DeepFace, incorrect", "FairFace, incorrect", "DeepFace, correct", "FairFace, correct"))
  
  return(plot)
}


plot_category("src_gender", "correct_gender", "Gender")
plot_category("src_age_grp", "correct_age", "Age")
plot_category("src_race", "correct_race", "Race")
```

<!-- PC? !-->

```{r, include=FALSE}
#pull in the master data frame for use
master_df <- read_csv('https://raw.githubusercontent.com/CUBoulder-DS/5301-5000-Final-Report/main/data/MasterDataFrame.csv', show_col_types = FALSE)

#get the deepface-only results
DF_results <- master_df %>% filter(pred_model=='DeepFace') %>% drop_na(pred_age_grp)
DF_results

#get the fairface-only results
FF_results <- master_df %>% filter(pred_model=='FairFace') %>% drop_na(pred_age_grp)
#FF_results

#isolate the source information
master_src <- master_df %>% filter(!duplicated(file)) %>% select(file,src_age,src_age_grp,src_gender,src_race)
```

```{r}

#some example functions for getting proportions

get_proportion <- function(df,evaluate_column,evaluate_value){
  x <- df %>% filter(!!as.symbol(evaluate_column)==evaluate_value)%>% count() %>% unlist() %>% unname()
  if (x==0){
    0
  } else {
    result <- df %>% group_by(!!as.symbol(evaluate_column)) %>%
      summarise(n=n())%>%
      mutate(prop=n/sum(n))%>%
      filter(!!as.symbol(evaluate_column)==evaluate_value)%>%
      select(prop)%>%unlist()%>% unname()
    print(result)
    # if (!is.na(result)) {
    #   result
    # } else {
    #   0
    # }
  }
}

#fiters down to a specific group, first, then 
get_proportion_subset <- function(df,filter_column,filter_value,evaluate_column,evaluate_value){
  x <- df %>% filter(!!as.symbol(evaluate_column)==evaluate_value)%>% count() %>% unlist() %>% unname()
  if (x==0){
    0
  } else {
    result <- df %>% filter(!!as.symbol(filter_column) == filter_value) %>%
      group_by(!!as.symbol(evaluate_column)) %>%
      summarise(n=n()) %>%
      mutate(prop = n/sum(n)) %>%
      filter(!!as.symbol(evaluate_column)==evaluate_value) %>%
      select(prop) %>% unlist() %>% unname()
    # if (!is.na(result)) {
    #   result
    # } else {
    #   0
    # }
  }
}

get_counts <- function(df,evaluate_column,evaluate_value){
  x <- df %>% filter(!!as.symbol(evaluate_column)==evaluate_value)%>% count() %>% unlist() %>% unname()
  if (x==0){
    0 
  } else {
    df %>% group_by(!!as.symbol(evaluate_column)) %>%
      summarise(n=n())%>%
      filter(!!as.symbol(evaluate_column)==evaluate_value) %>%
      select(n)%>%unlist()%>%unname()
  }
}

r_groups <- c("Asian","Black","Indian","Other","White")
a_groups <- c("0-2","3-9","10-19","20-29","30-39","40-49","50-59","60-69","70-130")
g_groups <- c("Male","Female")

#examples - 
#give the proportion of black people in the source data
#   get_proportion(master_src,'src_race','Black')
#filters on black being the predicted race, then gets the proportion of predicted gender for females.
#   get_proportion_subset(FF_results,'pred_race','Black','pred_gender','Female')

#get all the source data proportions into arrays (referenceable by group name)
source_race_props <- sapply(r_groups,get_proportion,df=master_src,evaluate_column="src_race")
source_age_props <- sapply(a_groups,get_proportion,df=master_src,evaluate_column="src_age_grp")
source_gen_props <- sapply(g_groups,get_proportion,df=master_src,evaluate_column="src_gender")
source_race_counts <- sapply(r_groups,get_counts,df=master_src,evaluate_column="src_race")
source_age_counts <- sapply(a_groups,get_counts,df=master_src,evaluate_column="src_age_grp")
source_gen_counts <- sapply(g_groups,get_counts,df=master_src,evaluate_column="src_gender")

#deepface prediction proportions
DF_pred_race_props <- sapply(r_groups,get_proportion,df=DF_results,evaluate_column="pred_race")
DF_pred_age_props <- sapply(a_groups,get_proportion,df=DF_results,evaluate_column="pred_age_grp")
DF_pred_gen_props <-sapply(g_groups,get_proportion,df=DF_results,evaluate_column="pred_gender")
DF_pred_race_counts <- sapply(r_groups,get_counts,df=DF_results,evaluate_column="pred_race")
DF_pred_age_counts <- sapply(a_groups,get_counts,df=DF_results,evaluate_column="pred_age_grp")
DF_pred_gen_counts <- sapply(g_groups,get_counts,df=DF_results,evaluate_column="pred_gender")

#fairface prediction proportions
FF_pred_race_props <- sapply(r_groups,get_proportion,df=FF_results,evaluate_column="pred_race")
FF_pred_age_props <-sapply(a_groups,get_proportion,df=FF_results,evaluate_column="pred_age_grp")
FF_pred_gen_props <-sapply(g_groups,get_proportion,df=FF_results,evaluate_column="pred_gender")
FF_pred_race_counts <- sapply(r_groups,get_counts,df=FF_results,evaluate_column="pred_race")
FF_pred_age_counts <- sapply(a_groups,get_counts,df=FF_results,evaluate_column="pred_age_grp")
FF_pred_gen_counts <- sapply(g_groups,get_counts,df=FF_results,evaluate_column="pred_gender")

n_DF <- count(DF_results%>%filter(!is.na(pred_gender))) %>% unlist() %>% unname()

n_FF <- count(FF_results %>% filter(!is.na(pred_gender))) %>% unlist() %>% unname()

prop_p_values <- function(group,src_prop,pred_prop,pred_n){

  num <- (sqrt(pred_n[group])*(src_prop[group]-pred_prop[group]))
  den <- (sqrt(pred_prop[group]*(1-pred_prop[group])))
  test_stat <- abs(num/den)
  pnorm(-test_stat) + (1 - pnorm(test_stat))
}

DF_race_p_values <- sapply(
  r_groups,
  prop_p_values,
  src_prop=source_race_props,
  pred_prop=DF_pred_race_props,
  pred_n=DF_pred_race_counts
)
names(DF_race_p_values)<- str_c("p.",r_groups)

FF_race_p_values <- sapply(
  r_groups,
  prop_p_values,
  src_prop=source_race_props,
  pred_prop=FF_pred_race_props,
  pred_n=FF_pred_race_counts
)
names(FF_race_p_values)<- str_c("p.",r_groups)

DF_gen_p_values <- sapply(
  g_groups,
  prop_p_values,
  src_prop=source_gen_props,
  pred_prop=DF_pred_gen_props,
  pred_n=DF_pred_gen_counts
)
names(DF_gen_p_values)<- str_c("p.",g_groups)

FF_gen_p_values <- sapply(
  g_groups,
  prop_p_values,
  src_prop=source_gen_props,
  pred_prop=FF_pred_gen_props,
  pred_n=FF_pred_gen_counts
)
names(FF_gen_p_values)<- str_c("p.",g_groups)

FF_age_p_values <- sapply(
  a_groups,
  prop_p_values,
  src_prop=source_age_props,
  pred_prop=FF_pred_age_props,
  pred_n=FF_pred_age_counts
)
names(FF_age_p_values)<- str_c("p.",a_groups)

DF_age_p_values <- sapply(
  a_groups,
  prop_p_values,
  src_prop=source_age_props,
  pred_prop=DF_pred_age_props,
  pred_n=DF_pred_age_counts
)
names(DF_age_p_values)<- str_c("p.",a_groups)

str_c("p.",a_groups)

#DF_race_p_values <- sapply(r_groups, prop_p_values, src_prop=source_race_props, pred_prop=DF_pred_race_props,pred_n=n_DF)
#FF_race_p_values <- sapply(r_groups, prop_p_values, src_prop=source_race_props, pred_prop=FF_pred_race_props,pred_n=n_FF)
#DF_age_p_values <- sapply(a_groups, prop_p_values, src_prop=source_age_props, pred_prop=DF_pred_age_props,pred_n=n_DF)
#DF_gender_p_values <- sapply(g_groups,prop_p_values, src_prop=source_gen_props, pred_prop=DF_pred_gen_props,pred_n=n_DF)
```

```{r}
#get_proportion_subset <- function(df,filter_column,filter_value,evaluate_column,evaluate_value){
#sapply(r_groups,get_proportion_a_given_b,filter_column="",filter_value="",evaluate_column="")

#sapply(r_groups, prop_p_values, src_prop=source_race_props, pred_prop=DF_pred_race_props,pred_n=DF_pred_race_counts)

```

```{r}
# test <- function(df,src_col,pred_col,val){
#   y <- df %>% select(!!as.symbol(pred_col))
#   x <- df %>% select(!!as.symbol(src_col))
#   c(x,y)
# }

# test1 <- function(df,tuple){
#   print(tuple)
# }

# iter <- t(data.frame(
#   src_col = c(
#     replicate(length(r_groups),"src_race"),
#     replicate(length(a_groups),"src_age_grp"),
#     replicate(length(g_groups),"src_gender")
#   ),
#   pred_col = c(
#     replicate(length(r_groups),"pred_race"),
#     replicate(length(a_groups),"pred_age_grp"),
#     replicate(length(g_groups),"pred_gender")
#   ),
#   val = c(
#     r_groups,
#     a_groups,
#     g_groups
#   )
# ))

# lapply(iter,print)
# sapply(iter,test1,df=master_df)
```

```{r}
knitr::kable(FF_gen_p_values)

knitr::kable(DF_gen_p_values)
```

```{r}
knitr::kable(FF_race_p_values)

knitr::kable(DF_race_p_values)
```

$$
\frac{\sqrt{n_M}\cdot(\bar{p}_M-p_S)}{\sqrt{p_S\cdot(1-P_S)}}
$$

```{r}
source_gen_props['Female']

source_race_props['Asian']

source_race_props
FF_pred_race_props
DF_pred_race_props

source_gen_props
FF_pred_gen_props
DF_pred_gen_props
```
