{
  "hash": "9bd14c4b888082a3504fa4dc4a49d774",
  "result": {
    "markdown": "---\n# format:\nhtml:\nserver: shiny\n---\n\n\n# ---\n# filters:\n#   - shinylive\n# format:\n#   html:\n#     resources:\n#       - \"../docs/shinylive-sw.js\"\n# ---\n# \n# # Data\n# \n# We describe the data here. Note that the default global setting for Quarto is set to NOT output the code into the rendered document, aka only including the results of any R code.\n# \n **We should include a print of the head of the dataframe of our data, along with some sample images!!**\n# \n# <!-- {{< include _CK_data_EDA_shiny.qmd >}} -->\n# \n# <!-- :::{.column-screen-inset} -->\n# <!-- ```{shinylive-r} -->\n# \n# <!-- ## file: _CK_data_EDA_shiny.qmd -->\n# <!-- ``` -->\n# <!-- ::: -->\n# \n# ```{shinylive-r}\n# #| standalone: true\n# \n# # libraries\n# library(shiny)\n# # library(tidyverse)\n# library(ggplot2) # Plotting\n# library(readr) # read_csv\n# library(shinythemes)\n# library(dplyr) # rename, etc\n# library(DT)\n# library(shinylive)\n# \n# # data\n# # location of data\n# utk_1 <- \"https://raw.githubusercontent.com/CUBoulder-DS/5301-5000-Final-Report/main/data/UTK/UTKpart1.csv\"\n# utk_2 <- \"https://raw.githubusercontent.com/CUBoulder-DS/5301-5000-Final-Report/main/data/UTK/UTKpart2.csv\"\n# utk_3 <- \"https://raw.githubusercontent.com/CUBoulder-DS/5301-5000-Final-Report/main/data/UTK/UTKpart3.csv\"\n# # download data\n# df_1 <- read_csv(utk_1, col_select = c(src_age, src_race, src_gender))\n# df_2 <- read_csv(utk_2, col_select = c(src_age, src_race, src_gender))\n# df_3 <- read_csv(utk_3, col_select = c(src_age, src_race, src_gender))\n# # combine data\n# df <- rbind(df_1, df_2, df_3)\n# # clean data\n# mydata <- df %>%\n#   filter(src_age != '0' & src_race != '0' & src_gender != '0') %>%\n#   rename(Age = src_age, Race = src_race, Gender = src_gender) \n# \n# # attach allows use of column names without calling full table\n# attach(mydata)\n# \n# # server input\n# server = function(input, output, session) {\n# \n#   # underlying data datatable\n#   output$originalData <- DT::renderDataTable(DT::datatable(mydata))\n#   \n#   output$underlyingDownload = downloadHandler(\n#     filename = \"underlying.csv\",\n#     content = function(file) {\n#       write.csv(mydata.new(), file)\n#     }\n#   )\n#   \n#   # checkbox selection for race\n#   output$raceSelect <- renderPrint({ input$checkGroupRace })\n#   \n#   # checkbox selection for gender\n#   output$genderSelect <- renderPrint({ input$checkGroupGender })\n#   \n#   # selectbox for race, gender or none\n#   output$subDensity <- renderPrint({ input$subDensitySelect })\n#   \n#   # slider for age\n#   output$ageRange <- renderPrint({ input$sliderAge })\n#   \n#   # slider for alpha\n#   output$alphaRange <- renderPrint({ input$sliderAlpha })\n#   \n#   # plot\n#   output$densityPlot = renderPlot({\n#     # age filter\n#     gdata <- mydata %>%\n#       filter(Age >= input$sliderAge[1] & Age <= input$sliderAge[2])\n#     \n#     # gender filter\n#     if (length(input$checkGroupGender) == 0) {\n#       gdata <- gdata\n#     } else if (length(input$checkGroupGender) == 1 & input$checkGroupGender[1] == 'Female') {\n#       gdata <- gdata %>%\n#         filter(Gender == 'Female')\n#     } else if (length(input$checkGroupGender) == 1 & input$checkGroupGender[1] == 'Male') {\n#       gdata <- gdata %>%\n#         filter(Gender == 'Male')\n#     }\n#     \n#     # race filter\n#     races <- c('Asian', 'Black', 'Indian', 'Other', 'White')\n#     if (length(input$checkGroupRace) == 0 | length(input$checkGroupRace) == 5) {\n#       gdata <- gdata\n#     } else {\n#       gdata <- gdata %>%\n#         filter(Race %in% races[which(races %in% input$checkGroupRace)])\n#     }\n#     \n#     # filter for just age, or add gender or race curves\n#     if (input$subDensitySelect == 'None') {\n#       ggplot(gdata) +\n#         geom_density(aes(Age))\n#     } else if (input$subDensitySelect == 'Gender') {\n#       ggplot(gdata) +\n#         geom_density(aes(Age, fill = Gender), alpha = input$sliderAlpha)\n#     } else {\n#       ggplot(gdata) +\n#         geom_density(aes(Age, fill = Race), alpha = input$sliderAlpha)\n#     }\n#   })\n# }\n# \n# ui = navbarPage(\n#   # theme\n#   # theme = shinytheme(\"cerulean\"),\n#   \n#   # title\n#   title = \"Bias in Facial Classification\",\n#   \n#   # tab - theme settings\n#   tabPanel(\"Select Theme Setting\", themeSelector()),\n#   \n#   # tab - exploratory analysis\n#   tabPanel(\"Exploratory Analysis\",\n#            fluidRow(\n#              # Race selection\n#              column(4,\n#                     checkboxGroupInput(\"checkGroupRace\", label = h3(\"Race Selection\"), \n#                                        choices = list(\"Asian\" = 'Asian',\n#                                                       \"Black\" = 'Black',\n#                                                       \"Indian\" = 'Indian',\n#                                                       \"Other\" = 'Other',\n#                                                       \"White\" = 'White'),\n#                                        selected = c('Asian', 'Black', 'Indian', 'Other', 'White'))),\n#              # Gender selection\n#              column(4,\n#                     checkboxGroupInput(\"checkGroupGender\", label = h3(\"Gender Selection\"), \n#                                        choices = list(\"Female\" = 'Female',\n#                                                       \"Male\" = 'Male'),\n#                                        selected = c('Male', 'Female'))),\n#              # subDensity selection\n#              column(4,\n#                     selectInput(\"subDensitySelect\", label = h3(\"Sub Filter\"), \n#                                        choices = list(\"Race\" = 'Race',\n#                                                       \"Gender\" = 'Gender',\n#                                                       \"None\" = 'None'),\n#                                        selected = 'None'))\n#              ),\n#            fluidRow(\n#              # Age selection\n#              column(6,\n#                     sliderInput(\"sliderAge\", label = h3(\"Age Range\"), min = 1, \n#                                 max = 135, value = c(15, 90))),\n#              # Alpha selection\n#              column(6,\n#                     sliderInput(\"sliderAlpha\", label = h3(\"Alpha Range\"), min = 0, \n#                                 max = 1, value = 0.2)\n#              )),\n#            \n#            # plot\n#            plotOutput(\"densityPlot\")),\n#   \n#   # tab - statistical testing\n#   tabPanel(\"Statistical Testing\"),\n#   \n#   # tab - feature testing\n#   tabPanel(\"Feature Testing\"),\n#   \n#   # tab - youtube video\n#   tabPanel(\"YouTube Video\",\n#            \"Replace with our group's YouTube Video?\",\n#            tags$iframe(src='https://www.youtube.com/embed/XZo4xyJXCak?si=Uw897KUFEtIr_QMN',\n#                        width = '900', height = '900')),\n#   \n#   # tab - underlying data\n#   tabPanel(\"Underlying Data\",\n#            # table output \n#            DT::dataTableOutput(\"originalData\"),\n#            # table download\n#            downloadButton(outputId = \"underlyingDownload\", label = \"Download Table\"))\n#   \n# )\n# \n# shinyApp(ui = ui, server = server)\n# ```\n\n<<--CK-->>\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell context='server'}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"row\">\n<div class=\"col-sm-4\">\n<div id=\"checkGroupRace\" class=\"form-group shiny-input-checkboxgroup shiny-input-container\" role=\"group\" aria-labelledby=\"checkGroupRace-label\">\n<label class=\"control-label\" id=\"checkGroupRace-label\" for=\"checkGroupRace\">\n<h3>Race Selection</h3>\n</label>\n<div class=\"shiny-options-group\">\n<div class=\"checkbox\">\n<label>\n<input type=\"checkbox\" name=\"checkGroupRace\" value=\"Asian\" checked=\"checked\"/>\n<span>Asian</span>\n</label>\n</div>\n<div class=\"checkbox\">\n<label>\n<input type=\"checkbox\" name=\"checkGroupRace\" value=\"Black\" checked=\"checked\"/>\n<span>Black</span>\n</label>\n</div>\n<div class=\"checkbox\">\n<label>\n<input type=\"checkbox\" name=\"checkGroupRace\" value=\"Indian\" checked=\"checked\"/>\n<span>Indian</span>\n</label>\n</div>\n<div class=\"checkbox\">\n<label>\n<input type=\"checkbox\" name=\"checkGroupRace\" value=\"Other\" checked=\"checked\"/>\n<span>Other</span>\n</label>\n</div>\n<div class=\"checkbox\">\n<label>\n<input type=\"checkbox\" name=\"checkGroupRace\" value=\"White\" checked=\"checked\"/>\n<span>White</span>\n</label>\n</div>\n</div>\n</div>\n</div>\n<div class=\"col-sm-4\">\n<div id=\"checkGroupGender\" class=\"form-group shiny-input-checkboxgroup shiny-input-container\" role=\"group\" aria-labelledby=\"checkGroupGender-label\">\n<label class=\"control-label\" id=\"checkGroupGender-label\" for=\"checkGroupGender\">\n<h3>Gender Selection</h3>\n</label>\n<div class=\"shiny-options-group\">\n<div class=\"checkbox\">\n<label>\n<input type=\"checkbox\" name=\"checkGroupGender\" value=\"Female\" checked=\"checked\"/>\n<span>Female</span>\n</label>\n</div>\n<div class=\"checkbox\">\n<label>\n<input type=\"checkbox\" name=\"checkGroupGender\" value=\"Male\" checked=\"checked\"/>\n<span>Male</span>\n</label>\n</div>\n</div>\n</div>\n</div>\n<div class=\"col-sm-4\">\n<div class=\"form-group shiny-input-container\">\n<label class=\"control-label\" id=\"subDensitySelect-label\" for=\"subDensitySelect\">\n<h3>Sub Filter</h3>\n</label>\n<div>\n<select id=\"subDensitySelect\" class=\"shiny-input-select\"><option value=\"Race\">Race</option>\n<option value=\"Gender\">Gender</option>\n<option value=\"None\" selected>None</option></select>\n<script type=\"application/json\" data-for=\"subDensitySelect\" data-nonempty=\"\">{\"plugins\":[\"selectize-plugin-a11y\"]}</script>\n</div>\n</div>\n</div>\n</div>\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"row\">\n<div class=\"col-sm-6\">\n<div class=\"form-group shiny-input-container\">\n<label class=\"control-label\" id=\"sliderAge-label\" for=\"sliderAge\">\n<h3>Age Range</h3>\n</label>\n<input class=\"js-range-slider\" id=\"sliderAge\" data-skin=\"shiny\" data-type=\"double\" data-min=\"1\" data-max=\"135\" data-from=\"15\" data-to=\"90\" data-step=\"1\" data-grid=\"true\" data-grid-num=\"9.57142857142857\" data-grid-snap=\"false\" data-prettify-separator=\",\" data-prettify-enabled=\"true\" data-keyboard=\"true\" data-drag-interval=\"true\" data-data-type=\"number\"/>\n</div>\n</div>\n<div class=\"col-sm-6\">\n<div class=\"form-group shiny-input-container\">\n<label class=\"control-label\" id=\"sliderAlpha-label\" for=\"sliderAlpha\">\n<h3>Alpha Range</h3>\n</label>\n<input class=\"js-range-slider\" id=\"sliderAlpha\" data-skin=\"shiny\" data-min=\"0\" data-max=\"1\" data-from=\"0.2\" data-step=\"0.01\" data-grid=\"true\" data-grid-num=\"10\" data-grid-snap=\"false\" data-prettify-separator=\",\" data-prettify-enabled=\"true\" data-keyboard=\"true\" data-data-type=\"number\"/>\n</div>\n</div>\n</div>\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"shiny-plot-output html-fill-item\" id=\"densityPlot\" style=\"width:100%;height:400px;\"></div>\n```\n:::\n:::\n\n\n\n\n::: callout-note\n## From the report requirements\n\nThis section should describe the data you'll be using. Answer **at least** **all** of the following questions:\n\n-   How was the data collected?\n\n-   What are the sources and influences of bias in the data?\n\n-   What are the important features (=columns) that you are using in your analysis? What do they mean?\n\nFeel free to add anything else that you think is necessary for understanding the paper and the context of the problem.\n:::\n\npreservefb0141a0f1197f92\npreservee0acf46e94ad817c\n\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"dependencies\">\n{\"type\":\"list\",\"attributes\":{},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"version\",\"src\",\"meta\",\"script\",\"stylesheet\",\"head\",\"attachment\",\"package\",\"all_files\",\"pkgVersion\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"html_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"selectize\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"0.12.4\"]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"file\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"www/shared/selectize\"]}]},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"js/selectize.min.js\",\"accessibility/js/selectize-plugin-a11y.min.js\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"css/selectize.bootstrap3.css\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"shiny\"]},{\"type\":\"logical\",\"attributes\":{},\"value\":[true]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"1.7.5\"]}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"version\",\"src\",\"meta\",\"script\",\"stylesheet\",\"head\",\"attachment\",\"package\",\"all_files\",\"pkgVersion\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"html_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"ionrangeslider-javascript\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"2.3.1\"]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"file\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"www/shared/ionrangeslider\"]}]},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"js/ion.rangeSlider.min.js\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"shiny\"]},{\"type\":\"logical\",\"attributes\":{},\"value\":[true]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"1.7.5\"]}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"version\",\"src\",\"meta\",\"script\",\"stylesheet\",\"head\",\"attachment\",\"package\",\"all_files\",\"pkgVersion\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"html_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"strftime\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"0.9.2\"]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"file\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"www/shared/strftime\"]}]},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"strftime-min.js\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"shiny\"]},{\"type\":\"logical\",\"attributes\":{},\"value\":[true]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"1.7.5\"]}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"version\",\"src\",\"meta\",\"script\",\"stylesheet\",\"head\",\"attachment\",\"package\",\"all_files\",\"pkgVersion\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"html_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"ionrangeslider-css\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"2.3.1\"]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"file\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"www/shared/ionrangeslider\"]}]},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"css/ion.rangeSlider.css\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"shiny\"]},{\"type\":\"logical\",\"attributes\":{},\"value\":[true]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"1.7.5\"]}]}]}\n</script>\n<!--/html_preserve-->\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"execution_dependencies\">\n{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\"]}},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\",\"version\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"data.frame\"]},\"row.names\":{\"type\":\"integer\",\"attributes\":{},\"value\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"base\",\"bslib\",\"cachem\",\"cli\",\"colorspace\",\"compiler\",\"datasets\",\"digest\",\"dplyr\",\"DT\",\"ellipsis\",\"evaluate\",\"fansi\",\"fastmap\",\"forcats\",\"generics\",\"ggplot2\",\"glue\",\"graphics\",\"grDevices\",\"grid\",\"gtable\",\"hms\",\"htmltools\",\"htmlwidgets\",\"httpuv\",\"jquerylib\",\"jsonlite\",\"knitr\",\"later\",\"lifecycle\",\"lubridate\",\"magrittr\",\"memoise\",\"methods\",\"mime\",\"munsell\",\"pillar\",\"pkgconfig\",\"promises\",\"purrr\",\"R6\",\"Rcpp\",\"readr\",\"rlang\",\"rmarkdown\",\"rstudioapi\",\"sass\",\"scales\",\"shiny\",\"shinythemes\",\"stats\",\"stringi\",\"stringr\",\"tibble\",\"tidyr\",\"tidyselect\",\"tidyverse\",\"timechange\",\"tools\",\"tzdb\",\"utf8\",\"utils\",\"vctrs\",\"withr\",\"xfun\",\"xtable\",\"yaml\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"4.3.1\",\"0.5.1\",\"1.0.8\",\"3.6.1\",\"2.1-0\",\"4.3.1\",\"4.3.1\",\"0.6.32\",\"1.1.3\",\"0.30\",\"0.3.2\",\"0.21\",\"1.0.4\",\"1.1.1\",\"1.0.0\",\"0.1.3\",\"3.4.3\",\"1.6.2\",\"4.3.1\",\"4.3.1\",\"4.3.1\",\"0.3.4\",\"1.1.3\",\"0.5.5\",\"1.6.2\",\"1.6.11\",\"0.1.4\",\"1.8.7\",\"1.44\",\"1.3.1\",\"1.0.3\",\"1.9.2\",\"2.0.3\",\"2.0.1\",\"4.3.1\",\"0.12\",\"0.5.0\",\"1.9.0\",\"2.0.3\",\"1.2.1\",\"1.0.2\",\"2.5.1\",\"1.0.11\",\"2.1.4\",\"1.1.1\",\"2.25\",\"0.15.0\",\"0.4.7\",\"1.2.1\",\"1.7.5\",\"1.2.0\",\"4.3.1\",\"1.7.12\",\"1.5.0\",\"3.2.1\",\"1.3.0\",\"1.2.0\",\"2.0.0\",\"0.2.0\",\"4.3.1\",\"0.4.0\",\"1.2.3\",\"4.3.1\",\"0.6.3\",\"2.5.0\",\"0.39\",\"1.8-4\",\"2.3.7\"]}]}]}\n</script>\n<!--/html_preserve-->",
    "supporting": [
      "data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {
      "preservee0acf46e94ad817c": "\n<script type=\"application/shiny-prerendered\" data-context=\"server-extras\">\nojs_define <- function(..., .session = shiny::getDefaultReactiveDomain()) {\n  quos <- rlang::enquos(...)\n  vars <- rlang::list2(...)\n  nm <- names(vars)\n  if (is.null(nm)) {\n    nm <- rep_len(\"\", length(vars))\n  }\n  mapply(function(q, nm, val) {\n    # Infer name, if possible\n    if (nm == \"\") {\n      tryCatch({\n        nm <- rlang::as_name(q)\n      }, error = function(e) {\n        code <- paste(collapse = \"\\n\", deparse(rlang::f_rhs(q)))\n        stop(\"ojs_define() could not create a name for the argument: \", code)\n      })\n    }\n    .session$output[[nm]] <- val\n    outputOptions(.session$output, nm, suspendWhenHidden = FALSE)\n    .session$sendCustomMessage(\"ojs-export\", list(name = nm))\n    NULL\n  }, quos, nm, vars, SIMPLIFY = FALSE, USE.NAMES = FALSE)\n  invisible()\n}\n</script>\n",
      "preservefb0141a0f1197f92": "\n<script type=\"application/shiny-prerendered\" data-context=\"server\">\n# data\n# location of data\nutk_1 <- \"https://raw.githubusercontent.com/CUBoulder-DS/5301-5000-Final-Report/main/data/UTK/UTKpart1.csv\"\nutk_2 <- \"https://raw.githubusercontent.com/CUBoulder-DS/5301-5000-Final-Report/main/data/UTK/UTKpart2.csv\"\nutk_3 <- \"https://raw.githubusercontent.com/CUBoulder-DS/5301-5000-Final-Report/main/data/UTK/UTKpart3.csv\"\n# download data\ndf_1 <- read_csv(utk_1, col_select = c(src_age, src_race, src_gender))\ndf_2 <- read_csv(utk_2, col_select = c(src_age, src_race, src_gender))\ndf_3 <- read_csv(utk_3, col_select = c(src_age, src_race, src_gender))\n# combine data\ndf <- rbind(df_1, df_2, df_3)\n# clean data\nmydata <- df %>%\n  filter(src_age != '0' & src_race != '0' & src_gender != '0') %>%\n  rename(Age = src_age, Race = src_race, Gender = src_gender)\n\n# attach allows use of column names without calling full table\nattach(mydata)\n\n# underlying data datatable\noutput$originalData <- DT::renderDataTable(DT::datatable(mydata))\n\noutput$underlyingDownload = downloadHandler(\n  filename = \"underlying.csv\",\n  content = function(file) {\n    write.csv(mydata.new(), file)\n  }\n)\n\n# checkbox selection for race\noutput$raceSelect <- renderPrint({ input$checkGroupRace })\n\n# checkbox selection for gender\noutput$genderSelect <- renderPrint({ input$checkGroupGender })\n\n# selectbox for race, gender or none\noutput$subDensity <- renderPrint({ input$subDensitySelect })\n\n# slider for age\noutput$ageRange <- renderPrint({ input$sliderAge })\n\n# slider for alpha\noutput$alphaRange <- renderPrint({ input$sliderAlpha })\n\n# plot\noutput$densityPlot = renderPlot({\n  # age filter\n  gdata <- mydata %>%\n    filter(Age >= input$sliderAge[1] & Age <= input$sliderAge[2])\n  \n  # gender filter\n  if (length(input$checkGroupGender) == 0) {\n    gdata <- gdata\n  } else if (length(input$checkGroupGender) == 1 & input$checkGroupGender[1] == 'Female') {\n    gdata <- gdata %>%\n      filter(Gender == 'Female')\n  } else if (length(input$checkGroupGender) == 1 & input$checkGroupGender[1] == 'Male') {\n    gdata <- gdata %>%\n      filter(Gender == 'Male')\n  }\n  \n  # race filter\n  races <- c('Asian', 'Black', 'Indian', 'Other', 'White')\n  if (length(input$checkGroupRace) == 0 | length(input$checkGroupRace) == 5) {\n    gdata <- gdata\n  } else {\n    gdata <- gdata %>%\n      filter(Race %in% races[which(races %in% input$checkGroupRace)])\n  }\n  \n  # filter for just age, or add gender or race curves\n  if (input$subDensitySelect == 'None') {\n    ggplot(gdata) +\n      geom_density(aes(Age))\n  } else if (input$subDensitySelect == 'Gender') {\n    ggplot(gdata) +\n      geom_density(aes(Age, fill = Gender), alpha = input$sliderAlpha)\n  } else {\n    ggplot(gdata) +\n      geom_density(aes(Age, fill = Race), alpha = input$sliderAlpha)\n  }\n})\n</script>\n"
    },
    "postProcess": true
  }
}